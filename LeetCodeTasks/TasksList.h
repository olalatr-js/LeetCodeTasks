#pragma once

// Practice with data structures
void BinST_func();
void Sorts();

// interview tasks
void CompoundEye();
void PickNik();
void Zynga();
void Stryker();
void MicrosoftDan();
void StrykerDesign();

void IntervalListIntersections();
void MajorityElement();
void MaximumErasureValue();
void LongestSubstringWithoutRepeatingCharacters();
void RectangleArea();
void SearchA2DMatrix();
void SpiralMatrixII();
void PermutationSequence();
void Candy();
void LongestIncreasingSubsequence();
void LongestMountainInArray();
void PalindromePartitioningII();
void PalindromePartitioning();
void BasicCalculatorII();
void MinimumSizeSubarraySum();
void ConstructBinaryTreeFromPreorderAndInorderTraversal();
void PartitionToKEqualSumSubsets();
void PartitionEqualSubsetSum();
void RecoverBinarySearchTree();
void SameTree();
void LongestHappyPrefix();
void MaximumProductSubarray();
void BestTimeToBuyAndSellStockIV();
void BestTimeToBuyAndSellStockIII();
void BestTimeToBuyAndSellStockII();
void DistinctSubsequences();
void DecodeWays();
void UniqueBinarySearchTrees();
void UniqueBinarySearchTreesII();
void EditDistance();
void ClimbingStairs();
void MinimizeMalwareSpreadII();
void PossibleBipartition();
void FindEventualSafeStates();
void SmallestStringStartingFromLeaf();
void BinaryTreePaths();
void IsGraphBipartite();
void NetworkDelayTime();
void RedundantConnectionII();
void RedundantConnection();
void AccountsMerge();
void SurroundedRegions();
void EvaluateDivision();
void ReconstructItinerary();
void MinimumMovesToReachTargetWithRotations();
void MinimumHeightTrees();
void CourseScheduleIII();
void CourseScheduleII();
void CourseSchedule();
void CopyListWithRandomPointer();
void CloneGraph();
void AllNodesDistanceKInBinaryTree();
void FlattenAMultilevelDoublyLinkedList();
void MinimumPathSum();
void UniquePathsIII();
void UniquePaths();
void InterleavingString();
void InsertInterval();
void MergeIntervals();
void DecodeString();
void SymmetricTree();
void ValidateBinarySearchTree();
void BinaryTreeLevelOrderTraversal();
void MinimumDepthOfBinaryTree();
void MaximumDepthOfBinaryTree();
void BinaryTreePostorderTraversal();
void BinaryTreeInorderTraversal();
void FindFirsAndLastPositionOfElementInSortedArray();
void NextPermutation();
void SubstringWithConcatenationOfAllWords();
void ReverseNodesInKGroup();
void GenerateParentheses();
void SwapNodesInPairs();
